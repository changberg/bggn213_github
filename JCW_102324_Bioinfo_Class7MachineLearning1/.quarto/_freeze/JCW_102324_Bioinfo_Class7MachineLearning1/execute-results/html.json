{
  "hash": "31d1f70f4c6fd0d5322633ffaab0205e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"JCW_102324_Bioinfo_Class7MachineLearning1\"\nauthor: \"Janie Chang-Weinberg (A69037446)\"\nformat: html\n---\n\n\n\nBefore we get into clustering methods, let's make some sample data to cluster where we know what the answer should be.\n\nTo help with this, let's use the `rnorm()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(rnorm(150000, mean=c(-3,3)))\n```\n\n::: {.cell-output-display}\n![](JCW_102324_Bioinfo_Class7MachineLearning1_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(rnorm(30,mean=+3),rnorm(30,mean=-3))\ny <- rev(x)\n\nz <- cbind(x,y)\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               x          y\n [1,]  2.6191392 -3.7218657\n [2,]  3.9185244 -4.6429388\n [3,]  2.0506681 -3.7154835\n [4,]  4.5621327 -2.9574938\n [5,]  1.6949593 -1.2913108\n [6,]  2.8445366 -5.4784814\n [7,]  3.4121494 -3.5680557\n [8,]  4.7136387 -2.1067004\n [9,]  3.8197020 -2.6250764\n[10,]  2.7173524 -2.6515912\n[11,]  2.4060863 -3.6933458\n[12,]  2.6701561 -2.9196079\n[13,]  1.7541627 -3.9621625\n[14,]  4.7679779 -1.6049004\n[15,]  2.6424442 -2.7634252\n[16,]  3.6543367 -3.1290522\n[17,]  3.0253362 -2.1979361\n[18,]  2.5727348 -3.2823444\n[19,]  0.7708346 -2.9576963\n[20,]  4.3434782 -3.5617795\n[21,]  5.4349639 -3.7055121\n[22,]  2.1958798 -5.2046938\n[23,]  5.2114149 -3.4222602\n[24,]  0.6544515 -3.3001717\n[25,]  2.6269718 -3.6183417\n[26,]  2.7201865 -3.1615138\n[27,]  3.4577016 -2.8672572\n[28,]  2.4888069 -2.9232668\n[29,]  1.5094294 -3.0654796\n[30,]  2.4925036 -1.4261701\n[31,] -1.4261701  2.4925036\n[32,] -3.0654796  1.5094294\n[33,] -2.9232668  2.4888069\n[34,] -2.8672572  3.4577016\n[35,] -3.1615138  2.7201865\n[36,] -3.6183417  2.6269718\n[37,] -3.3001717  0.6544515\n[38,] -3.4222602  5.2114149\n[39,] -5.2046938  2.1958798\n[40,] -3.7055121  5.4349639\n[41,] -3.5617795  4.3434782\n[42,] -2.9576963  0.7708346\n[43,] -3.2823444  2.5727348\n[44,] -2.1979361  3.0253362\n[45,] -3.1290522  3.6543367\n[46,] -2.7634252  2.6424442\n[47,] -1.6049004  4.7679779\n[48,] -3.9621625  1.7541627\n[49,] -2.9196079  2.6701561\n[50,] -3.6933458  2.4060863\n[51,] -2.6515912  2.7173524\n[52,] -2.6250764  3.8197020\n[53,] -2.1067004  4.7136387\n[54,] -3.5680557  3.4121494\n[55,] -5.4784814  2.8445366\n[56,] -1.2913108  1.6949593\n[57,] -2.9574938  4.5621327\n[58,] -3.7154835  2.0506681\n[59,] -4.6429388  3.9185244\n[60,] -3.7218657  2.6191392\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(z)\n```\n\n::: {.cell-output-display}\n![](JCW_102324_Bioinfo_Class7MachineLearning1_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n## K-means clustering\n\nThe function in base R for clustering is `kmeans()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkm <- kmeans(z,2)\nkm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nK-means clustering with 2 clusters of sizes 30, 30\n\nCluster means:\n          x         y\n1  2.991755 -3.184197\n2 -3.184197  2.991755\n\nClustering vector:\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2\n[39] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n\nWithin cluster sum of squares by cluster:\n[1] 68.87524 68.87524\n (between_SS / total_SS =  89.3 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n```\n\n\n:::\n:::\n\n\n\n> Q. Print out the cluster membership vector (ie, our main answer)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkm$cluster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2\n[39] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(z, col=c(\"red\",\"blue\"))\n```\n\n::: {.cell-output-display}\n![](JCW_102324_Bioinfo_Class7MachineLearning1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nTo plot with color by cluster result and add cluster centers:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(z, col=km$cluster)\npoints(km$centers, col=\"blue\", pch=42,cex=2)\n```\n\n::: {.cell-output-display}\n![](JCW_102324_Bioinfo_Class7MachineLearning1_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n> Q. Can you cluster our data in `z` into four clusters?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkm4 <- kmeans(z,centers=4)\nplot(z, col=km4$cluster)\npoints(km4$centers, col=\"orange\",pch=25)\n```\n\n::: {.cell-output-display}\n![](JCW_102324_Bioinfo_Class7MachineLearning1_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## Hierarchical Clustering\n\nThe main function for hierarchical clustering in base R is called `hclust()`\n\nUnlike `kmeans()`, you cannot just pass in the data as input. You first need a distance matrix from the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- dist(z)\nhc <- hclust(d)\nhc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nhclust(d = d)\n\nCluster method   : complete \nDistance         : euclidean \nNumber of objects: 60 \n```\n\n\n:::\n:::\n\n\n\nThere is a specific hclust plot() method...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hc)\nabline(h=9, col=\"red\")\n```\n\n::: {.cell-output-display}\n![](JCW_102324_Bioinfo_Class7MachineLearning1_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nTo get the main clustering result (ie, the membership vector), you can \"cut\" the cluster dendrogram at a given height. To perform this, use `cutree()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrps <- cutree(hc, h=9)\ngrps\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2\n[39] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n```\n\n\n:::\n:::\n\n\n\n## Principal Component Analysis\n\"Principal component analysis (PCA) is a well established \"multivariate statistical technique\" used to reduce the dimensionality of a complex data set to a more manageable number (typically 2D or 3D). This method is particularly useful for highlighting strong paterns and relationships in large datasets (i.e. revealing major similarities and diferences) that are otherwise hard to visualize. As we will see again and again in this course PCA is often used to make all sorts of bioinformatics data easy to explore and visualize.\" -ripped from webpage\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://tinyurl.com/UK-foods\"\nx <- read.csv(url)\ndim(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17  5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     X England Wales Scotland N.Ireland\n1               Cheese     105   103      103        66\n2        Carcass_meat      245   227      242       267\n3          Other_meat      685   803      750       586\n4                 Fish     147   160      122        93\n5       Fats_and_oils      193   235      184       209\n6               Sugars     156   175      147       139\n7      Fresh_potatoes      720   874      566      1033\n8           Fresh_Veg      253   265      171       143\n9           Other_Veg      488   570      418       355\n10 Processed_potatoes      198   203      220       187\n11      Processed_Veg      360   365      337       334\n12        Fresh_fruit     1102  1137      957       674\n13            Cereals     1472  1582     1462      1494\n14           Beverages      57    73       53        47\n15        Soft_drinks     1374  1256     1572      1506\n16   Alcoholic_drinks      375   475      458       135\n17      Confectionery       54    64       62        41\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrownames(x) <- x[,1]\nx <- x[,-1]\nhead(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               England Wales Scotland N.Ireland\nCheese             105   103      103        66\nCarcass_meat       245   227      242       267\nOther_meat         685   803      750       586\nFish               147   160      122        93\nFats_and_oils      193   235      184       209\nSugars             156   175      147       139\n```\n\n\n:::\n:::\n\n\n\n>Plot 1 (rainbow bar plot)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))\n```\n\n::: {.cell-output-display}\n![](JCW_102324_Bioinfo_Class7MachineLearning1_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n> Q. 3 (pls do this for a barplot)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(x, col=rainbow(10), pch=16)\n```\n\n::: {.cell-output-display}\n![](JCW_102324_Bioinfo_Class7MachineLearning1_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## Principal Component Analysis can help organize data\n\nThe main function to do PCA in base R is `prcomp()`\nThe way the data are organized currently will not work, you must first transpose the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npca <- prcomp(t(x))\nsummary(pca)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nImportance of components:\n                            PC1      PC2      PC3       PC4\nStandard deviation     324.1502 212.7478 73.87622 2.921e-14\nProportion of Variance   0.6744   0.2905  0.03503 0.000e+00\nCumulative Proportion    0.6744   0.9650  1.00000 1.000e+00\n```\n\n\n:::\n:::\n\n\nCheck what is inside `pca` that has been calculated\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(pca)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$names\n[1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"       \n\n$class\n[1] \"prcomp\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npca$x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 PC1         PC2        PC3           PC4\nEngland   -144.99315   -2.532999 105.768945 -9.152022e-15\nWales     -240.52915 -224.646925 -56.475555  5.560040e-13\nScotland   -91.86934  286.081786 -44.415495 -6.638419e-13\nN.Ireland  477.39164  -58.901862  -4.877895  1.329771e-13\n```\n\n\n:::\n:::\n\n\nTo make our main results figure called a \"PC plot\" (or score/ordination/PC1vsPC2 plot)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(pca$x[,1], pca$x[,2], \n     col=c(\"black\", \"red\", \"blue\", \"darkgreen\"),\n     pch=16,\n     xlab=\"PC1 (67.4%)\", ylab=\"PC2 (29%)\")\n```\n\n::: {.cell-output-display}\n![](JCW_102324_Bioinfo_Class7MachineLearning1_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n# variable loadings plot\n\ncan give us insight as to how the original variables (in this case the the foods) contribute to our PC axis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npca$rotation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                             PC1          PC2         PC3          PC4\nCheese              -0.056955380  0.016012850  0.02394295 -0.409382587\nCarcass_meat         0.047927628  0.013915823  0.06367111  0.729481922\nOther_meat          -0.258916658 -0.015331138 -0.55384854  0.331001134\nFish                -0.084414983 -0.050754947  0.03906481  0.022375878\nFats_and_oils       -0.005193623 -0.095388656 -0.12522257  0.034512161\nSugars              -0.037620983 -0.043021699 -0.03605745  0.024943337\nFresh_potatoes       0.401402060 -0.715017078 -0.20668248  0.021396007\nFresh_Veg           -0.151849942 -0.144900268  0.21382237  0.001606882\nOther_Veg           -0.243593729 -0.225450923 -0.05332841  0.031153231\nProcessed_potatoes  -0.026886233  0.042850761 -0.07364902 -0.017379680\nProcessed_Veg       -0.036488269 -0.045451802  0.05289191  0.021250980\nFresh_fruit         -0.632640898 -0.177740743  0.40012865  0.227657348\nCereals             -0.047702858 -0.212599678 -0.35884921  0.100043319\nBeverages           -0.026187756 -0.030560542 -0.04135860 -0.018382072\nSoft_drinks          0.232244140  0.555124311 -0.16942648  0.222319484\nAlcoholic_drinks    -0.463968168  0.113536523 -0.49858320 -0.273126013\nConfectionery       -0.029650201  0.005949921 -0.05232164  0.001890737\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(pca$rotation)\n```\n\n::: {.cell-output-display}\n![](JCW_102324_Bioinfo_Class7MachineLearning1_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "JCW_102324_Bioinfo_Class7MachineLearning1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}